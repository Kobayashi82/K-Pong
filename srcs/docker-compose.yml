
services:


# ----------------- WEB SERVER ----------------- #


  # Nginx
  nginx:
    container_name: nginx                             # Container name
    build:
      context: ./backend/nginx                        # Location of the Dockerfile
    volumes:
      - ./frontend:/usr/share/nginx/html              # Bind mount (instant changes)
    ports:
      - "80:80"                                       # Port for HTTP
      - "443:443"                                     # Port for HTTPS
    networks:
      - pong-net                                      # Network connecting all containers
    restart: always                                   # Restart container in case of failure


# ------------------ DATABASE ------------------ #


  # PostgreSQL
  postgre:
    container_name: postgre                           # Container name
    build:
      context: ./backend/postgre                      # Location of the Dockerfile
    env_file: ../.env                                 # File with environment variables
    volumes:
      - db_data:/var/lib/postgresql/data              # Database data volume
      - db_logs:/var/log/postgresql                   # Database logs volume
    networks:
      - pong-net                                      # Network connecting all containers
    restart: always                                   # Restart container in case of failure


# ------------------- METRICS ------------------ #


  # Prometheus
  prometheus:
    container_name: prometheus                        # Container name
    build:
      context: ./backend/metrics/prometheus           # Location of the Dockerfile
    volumes:
      - prometheus_data:/prometheus                   # Prometheus data volume
    networks:
      - pong-net                                      # Network connecting all containers
    restart: always                                   # Restart container in case of failure

  # Grafana
  grafana:
    container_name: grafana                           # Container name
    build:
      context: ./backend/metrics/grafana              # Location of the Dockerfile
    env_file: ../.env                                 # File with environment variables
    environment:
      - GF_SERVER_ROOT_URL=https://localhost/grafana/ # Base path for Grafana
    networks:
      - pong-net                                      # Network connecting all containers
    restart: always                                   # Restart container in case of failure

  # AlertManager
  alertmanager:
    container_name: alertmanager                      # Container name
    build:
      context: ./backend/metrics/alertmanager         # Location of the Dockerfile
    networks:
      - pong-net                                      # Network connecting all containers
    restart: always                                   # Restart container in case of failure


# ------------------- LOGGING ------------------ #


  # ElasticSearch
  elasticsearch:
    container_name: elasticsearch                     # Container name
    build:
      context: ./backend/logging/elasticsearch        # Location of the Dockerfile
    env_file: ../.env                                 # File with environment variables
    environment:
      - discovery.type=single-node                    # Set to single-node mode (multi-node clustering is unnecessary for this project)
      - xpack.security.enabled=true                   # Enable security features (e.g., authentication)
      - logger.level=ERROR                            # Set logging level to show only errors (TRACE, DEBUG, INFO, WARN, ERROR, FATAL)
    volumes:
      - ./backend/logging/data:/usr/share/elasticsearch/data # Bind mount (temporary)
    networks:
      - pong-net                                      # Network connecting all containers
    restart: always                                   # Restart container in case of failure

  # LogStash
  logstash:
    container_name: logstash                          # Container name
    build:
      context: ./backend/logging/logstash             # Location of the Dockerfile
    env_file: ../.env                                 # File with environment variables
    volumes:
      - db_logs:/var/log/postgresql                   # Database logs volume
    networks:
      - pong-net                                      # Network connecting all containers
    restart: always                                   # Restart container in case of failure

  # Kibana
  kibana:
    container_name: kibana                            # Container name
    image: docker.elastic.co/kibana/kibana:7.17.4
    env_file: ../.env                                 # File with environment variables
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200 # Elasticsearch URL
      - SERVER_BASEPATH=/kibana/                      # Base path for Kibana
    networks:
      - pong-net                                      # Network connecting all containers
    restart: always                                   # Restart container in case of failure


# --------------- MICRO-SERVICES --------------- #


  # Service1
  service1:
    container_name: service1                          # Container name
    build:
      context: ./backend/microservices/service1       # Location of the Dockerfile
    env_file: ../.env                                 # File with environment variables
    volumes:
      - ./backend/microservices/service1:/app         # Bind mount (instant changes)
    networks:
      - pong-net                                      # Network connecting all containers
    depends_on:
      - postgre                                       # PostgreSQL Dependency
    restart: always                                   # Restart container in case of failure


# ------------------ VOLUMES ------------------- #


volumes:
  db_data:                                            # Database data volume
  db_logs:                                            # Database logs volume
  prometheus_data:                                    # Prometheus data volume


# ------------------ NETWORK ------------------- #

networks:
  pong-net:
    name: pong-net                                    # Network connecting all containers
